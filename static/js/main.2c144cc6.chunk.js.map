{"version":3,"sources":["contexts/ThemeContext.js","contexts/AuthContext.js","components/Navbar.js","contexts/BookContext.js","components/Booklist.js","components/ThemeToggle.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toggleTheme","_this","setState","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","AuthContext","AuthContextProvider","isAuthenticated","toggleAuth","Navbar","_useContext","useContext","_useContext2","theme","style","background","color","type","checked","onChange","BookContext","BookContextProvider","_useState","useState","title","id","books","slicedToArray","Booklist","className","map","book","key","ThemeToggle","onClick","App","contexts_ThemeContext","contexts_AuthContext","components_Navbar","contexts_BookContext","components_Booklist","components_ThemeToggle","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c144cc6.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n\r\n  state = {\r\n    isLightTheme: true,\r\n    light: { syntax: '#555', ui: '#ddd', bg: '#eee'},\r\n    dark: { syntax: '#ddd', ui: '#333', bg: '#555'}\r\n  }\r\n\r\n  toggleTheme = () => {\r\n    this.setState({\r\n      isLightTheme: !this.state.isLightTheme\r\n    })\r\n  }\r\n  render() {\r\n     return (\r\n      <div>\r\n        <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\r\n          {this.props.children}\r\n        </ThemeContext.Provider>\r\n      </div>\r\n     ) \r\n  }\r\n}\r\n\r\nexport default ThemeContextProvider;\r\n","import React, { Component, createContext } from 'react'\r\n\r\nexport const AuthContext = createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isAuthenticated: false\r\n  }\r\n\r\n  toggleAuth = () => {\r\n    this.setState({isAuthenticated: !this.state.isAuthenticated})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AuthContext.Provider value={{...this.state, toggleAuth: this.toggleAuth}}>\r\n        {this.props.children}\r\n      </AuthContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AuthContextProvider\r\n","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\n// class Navbar extends Component {\r\n//   // static contextType = ThemeContext;\r\n  \r\n//   render() {\r\n//     // console.log(this.contextT)\r\n    \r\n//     return (   \r\n//     <AuthContext.Consumer>{(authContext) =>(\r\n//     <ThemeContext.Consumer>{(themeContext) => {\r\n//       const { isAuthenticated, toggleAuth } = authContext;\r\n//       const { isLightTheme, light, dark } = themeContext;\r\n//       const theme = isLightTheme ? light : dark;\r\n//       return (\r\n//         <nav style={{background: theme.ui, color: theme.syntax}}>\r\n//           <h1>Context App</h1>\r\n//           <div>\r\n//             <form>\r\n//               <input type=\"checkbox\" checked={isAuthenticated} onChange={toggleAuth}/>\r\n//             </form>\r\n//             {isAuthenticated ? 'Logged In' : 'Logged Out'}\r\n//           </div>\r\n//           <ul>\r\n//             <li>Home</li>\r\n//             <li>About</li>\r\n//             <li>Contact</li>\r\n//           </ul>\r\n//         </nav>\r\n//       )\r\n//     }}</ThemeContext.Consumer>\r\n//     )}</AuthContext.Consumer>\r\n//   )\r\n//   }\r\n// }\r\n\r\n\r\nconst Navbar = () => {\r\nconst { isLightTheme, light, dark } = useContext(ThemeContext);\r\nconst { isAuthenticated, toggleAuth } = useContext(AuthContext);\r\nconst theme = isLightTheme ? light : dark;\r\n  return (\r\n    <nav style={{background: theme.ui, color: theme.syntax}}>\r\n      <h1>Context App</h1>\r\n      <div>\r\n        <form>\r\n          <input type=\"checkbox\" checked={isAuthenticated} onChange={toggleAuth}/>\r\n        </form>\r\n        {isAuthenticated ? 'Logged In' : 'Logged Out'}\r\n      </div>\r\n      <ul>\r\n        <li>Home</li>\r\n        <li>About</li>\r\n        <li>Contact</li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;","import React, { useState, createContext} from 'react'\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n  const [books] = useState([\r\n    {title: \"Name of the wind\", id: 1},\r\n    {title: \"The way of kings\", id: 2},\r\n    {title: \"The final empire\", id: 3},\r\n    {title: \"The hero of ages\", id: 4}\r\n  ])\r\n  return (\r\n    <BookContext.Provider value={{books}}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  )\r\n}\r\nexport default BookContextProvider;\r\n","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { BookContext } from  '../contexts/BookContext';\r\n\r\n// class Booklist extends Component {\r\n//   static contextType = ThemeContext;\r\n\r\n//   render() {\r\n//     const { isLightTheme, light, dark } = this.context;\r\n//     const theme = isLightTheme ? light : dark;\r\n//     return (\r\n//       <div className=\"book-list\" style={{background: theme.bg, color: theme.syntax}}>\r\n//         <ul >\r\n//           <li style={{ background: theme.ui }}>The way of the kings</li>\r\n//           <li style={{ background: theme.ui }}>The name of the wind</li>\r\n//           <li style={{ background: theme.ui }}>The final empire</li>\r\n//         </ul>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nconst Booklist = () => {\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext)\r\n  const theme = isLightTheme ? light : dark;\r\n  const { books } = useContext(BookContext)\r\n  return(\r\n    <div className=\"book-list\" style={{background: theme.bg, color: theme.syntax}}>\r\n      <ul>\r\n        {books.map(book => {\r\n          return(\r\n          <li key={book.id} style={{ background: theme.ui }}>{book.title}</li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Booklist;","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext'\r\n\r\n// class ThemeToggle extends Component {\r\n//   static contextType = ThemeContext;\r\n  \r\n//   render() {\r\n//     const { toggleTheme } = this.context;\r\n//     return (\r\n//      <button onClick={toggleTheme}>Toggle The Theme</button>\r\n//     )\r\n//   }\r\n// }\r\n\r\nconst ThemeToggle = () => {\r\n  const {toggleTheme} = useContext(ThemeContext)\r\n  return (\r\n    <button onClick={toggleTheme}>Toggle The Theme</button>\r\n  )\r\n}\r\n\r\n\r\nexport default ThemeToggle;\r\n\r\n","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Booklist from './components/Booklist';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport ThemeToggle from './components/ThemeToggle';\nimport AuthContextProvider from './contexts/AuthContext';\nimport BookContextProvider from './contexts/BookContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <AuthContextProvider>\n          <Navbar />\n          <BookContextProvider>\n            <Booklist />\n          </BookContextProvider>\n          <ThemeToggle />\n        </AuthContextProvider>\n      </ThemeContextProvider>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}